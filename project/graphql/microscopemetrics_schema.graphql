# metamodel_version: 1.7.0
interface CentersFitted
  {
  }

interface CentersGeometric
  {
  }

interface CentersMaxIntensity
  {
  }

interface CentersOfMass
  {
  }

type Channel
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    excitationWavelengthNm: Float
    emissionWavelengthNm: Float
  }

type ChannelSeries
  {
    channels: [Channel]!
  }

type Color
  {
    r: Integer!
    g: Integer!
    b: Integer!
    alpha: Integer
  }

type Column
  {
    name: String
    description: String
    sourceReference: DataReference
    dataType: String!
    values: [String]
  }

type Comment
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    datetime: Datetime!
    author: Experimenter
    commentType: CommentTypesEnum!
    text: String!
  }

type DataReference
  {
    dataUri: String
    omeroHost: String
    omeroPort: Integer
    omeroObjectType: OMEROObjectTypeEnum
    omeroObjectId: Integer
  }

type Ellipse
  {
    name: String
    description: String
    z: Float
    c: Integer
    t: Integer
    fillColor: Color
    strokeColor: Color
    strokeWidth: Integer
    x: Float!
    y: Float!
    w: Float!
    h: Float!
  }

type Experimenter
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    orcid: String!
  }

type FieldIlluminationDataset
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    microscope: Microscope!
    experimenter: Experimenter
    acquisitionDatetime: Datetime
    acquisitionProtocol: Protocol
    processed: Boolean!
    inputData: FieldIlluminationInputData
    inputParameters: FieldIlluminationInputParameters
    output: FieldIlluminationOutput
    sample: HomogeneousField
  }

type FieldIlluminationInputData
  {
    fieldIlluminationImage: [Image]!
  }

type FieldIlluminationInputParameters
  {
    bitDepth: Integer
    saturationThreshold: Float!
    cornerFraction: Float!
    sigma: Float!
  }

type FieldIlluminationKeyMeasurements
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    tableData: MetaObject
    imageName: [String]
    imageId: [String]
    channelName: [String]
    channelNr: [Integer]
    channelId: [String]
    centerRegionIntensityFraction: [Float]
    centerRegionAreaFraction: [Float]
    centerOfMassY: [Float]
    centerOfMassYRelative: [Float]
    centerOfMassX: [Float]
    centerOfMassXRelative: [Float]
    centerOfMassDistanceRelative: [Float]
    centerGeometricY: [Float]
    centerGeometricYRelative: [Float]
    centerGeometricX: [Float]
    centerGeometricXRelative: [Float]
    centerGeometricDistanceRelative: [Float]
    centerFittedY: [Float]
    centerFittedYRelative: [Float]
    centerFittedX: [Float]
    centerFittedXRelative: [Float]
    centerFittedDistanceRelative: [Float]
    maxIntensity: [Float]
    maxIntensityPosY: [Float]
    maxIntensityPosYRelative: [Float]
    maxIntensityPosX: [Float]
    maxIntensityPosXRelative: [Float]
    maxIntensityDistanceRelative: [Float]
    topLeftIntensityMean: [Float]
    topLeftIntensityRatio: [Float]
    topCenterIntensityMean: [Float]
    topCenterIntensityRatio: [Float]
    topRightIntensityMean: [Float]
    topRightIntensityRatio: [Float]
    middleLeftIntensityMean: [Float]
    middleLeftIntensityRatio: [Float]
    middleCenterIntensityMean: [Float]
    middleCenterIntensityRatio: [Float]
    middleRightIntensityMean: [Float]
    middleRightIntensityRatio: [Float]
    bottomLeftIntensityMean: [Float]
    bottomLeftIntensityRatio: [Float]
    bottomCenterIntensityMean: [Float]
    bottomCenterIntensityRatio: [Float]
    bottomRightIntensityMean: [Float]
    bottomRightIntensityRatio: [Float]
  }

type FieldIlluminationOutput
  {
    processingApplication: [String]!
    processingVersion: [String]!
    processingEntity: [String]
    processingDatetime: Datetime!
    processingLog: String
    warnings: [String]
    errors: [String]
    validated: Boolean!
    validationDatetime: Datetime
    comment: Comment
    keyMeasurements: FieldIlluminationKeyMeasurements
    intensityProfiles: [Table]
    roiProfiles: [Roi]
    roiCorners: [Roi]
    roiCentersOfMass: [Roi]
    roiCentersGeometric: [Roi]
    roiCentersFitted: [Roi]
    roiCentersMaxIntensity: [Roi]
    roiCenterRegion: [Roi]
  }

type FluorescentHomogeneousThickField
  {
    name: String
    description: String
    preparationProtocol: Protocol!
    manufacturer: String
  }

type FluorescentHomogeneousThinField
  {
    name: String
    description: String
    preparationProtocol: Protocol!
    manufacturer: String
  }

type HarmonizedMetricsDatasetCollection
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    datasetCollection: [MetricsDataset]
    datasetClass: String!
  }

interface HomogeneousField
  {
    name: String
    description: String
    preparationProtocol: Protocol!
    manufacturer: String
  }

type Image
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    acquisitionDatetime: Datetime
    voxelSizeXMicron: Float
    voxelSizeYMicron: Float
    voxelSizeZMicron: Float
    shapeX: Integer!
    shapeY: Integer!
    shapeZ: Integer!
    shapeC: Integer!
    shapeT: Integer!
    timeSeries: TimeSeries
    channelSeries: ChannelSeries
    sourceImages: [DataReference]
    arrayData: MetaObject
  }

type ImageMask
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    acquisitionDatetime: Datetime
    voxelSizeXMicron: Float
    voxelSizeYMicron: Float
    voxelSizeZMicron: Float
    shapeX: Integer!
    shapeY: Integer!
    shapeZ: Integer!
    shapeC: Integer!
    shapeT: Integer!
    timeSeries: TimeSeries
    channelSeries: ChannelSeries
    sourceImages: [DataReference]
    arrayData: MetaObject
  }

interface KeyMeasurements
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    tableData: MetaObject
  }

type LightSource
  {
    wavelengthNm: Float!
  }

type LightSourcePower
  {
    name: String
    description: String
    preparationProtocol: Protocol!
    manufacturer: String
  }

type LightSourcePowerDataset
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    microscope: Microscope!
    experimenter: Experimenter
    sample: Sample
    acquisitionDatetime: Datetime
    acquisitionProtocol: Protocol
    processed: Boolean!
    inputData: LightSourcePowerInputData
    inputParameters: LightSourcePowerInputParameters
    output: LightSourcePowerOutput
  }

type LightSourcePowerInputData
  {
    measurementDevice: PowerMeter!
    powerSamples: [PowerSample]!
  }

type LightSourcePowerInputParameters
  {
  }

type LightSourcePowerKeyMeasurements
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    tableData: MetaObject
    lightSource: LightSource!
    powerMeanMw: [Float]!
    powerMedianMw: [Float]!
    powerStdMw: [Float]!
    powerMinMw: [Float]!
    powerMaxMw: [Float]
    linearity: [Float]!
  }

type LightSourcePowerOutput
  {
    processingApplication: [String]!
    processingVersion: [String]!
    processingEntity: [String]
    processingDatetime: Datetime!
    processingLog: String
    warnings: [String]
    errors: [String]
    validated: Boolean!
    validationDatetime: Datetime
    comment: Comment
    keyMeasurements: LightSourcePowerKeyMeasurements
  }

type Line
  {
    name: String
    description: String
    z: Float
    c: Integer
    t: Integer
    fillColor: Color
    strokeColor: Color
    strokeWidth: Integer
    x1: Float!
    y1: Float!
    x2: Float!
    y2: Float!
  }

type Mask
  {
    name: String
    description: String
    z: Float
    c: Integer
    t: Integer
    fillColor: Color
    strokeColor: Color
    strokeWidth: Integer
    x: Float!
    y: Float!
    mask: ImageMask
  }

type MetaObject
  {
  }

interface MetricsDataset
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    microscope: Microscope!
    experimenter: Experimenter
    sample: Sample
    acquisitionDatetime: Datetime
    acquisitionProtocol: Protocol
    inputData: MetricsInputData!
    inputParameters: MetricsInputParameters
    processed: Boolean!
    output: MetricsOutput
  }

type MetricsDatasetCollection
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    datasetCollection: [MetricsDataset]
  }

interface MetricsInputData
  {
  }

interface MetricsInputParameters
  {
  }

interface MetricsObject
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
  }

interface MetricsOutput
  {
    processingApplication: [String]!
    processingVersion: [String]!
    processingEntity: [String]
    processingDatetime: Datetime!
    processingLog: String
    warnings: [String]
    errors: [String]
    validated: Boolean!
    validationDatetime: Datetime
    comment: Comment
  }

type Microscope
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    microscopeType: MicroscopeTypeEnum
    manufacturer: String
    model: String
    serialNumber: String
    commentCollection: [Comment]
  }

type MicroscopeCollection
  {
    microscopeCollection: [Microscope]!
  }

interface NamedObject
  {
    name: String
    description: String
  }

type OrthogonalImage
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    acquisitionDatetime: Datetime
    voxelSizeXMicron: Float
    voxelSizeYMicron: Float
    voxelSizeZMicron: Float
    shapeX: Integer!
    shapeY: Integer!
    shapeZ: Integer!
    shapeC: Integer!
    shapeT: Integer!
    timeSeries: TimeSeries
    channelSeries: ChannelSeries
    sourceImages: [DataReference]
    arrayData: MetaObject
    sourceRoi: Roi!
    axis: PlaneAxisEnum!
  }

type Point
  {
    name: String
    description: String
    z: Float
    c: Integer
    t: Integer
    fillColor: Color
    strokeColor: Color
    strokeWidth: Integer
    x: Float!
    y: Float!
  }

type Polygon
  {
    name: String
    description: String
    z: Float
    c: Integer
    t: Integer
    fillColor: Color
    strokeColor: Color
    strokeWidth: Integer
    vertexes: [Vertex]!
    isOpen: Boolean!
  }

type PowerMeter
  {
    name: String
    description: String
    manufacturer: String
    model: String
  }

type PowerSample
  {
    acquisitionDatetime: Datetime!
    lightSource: LightSource!
    samplingLocation: SamplingLocationEnum!
    powerSetPoint: Float!
    powerMw: Float!
    integrationTimeMs: Float
  }

interface ProfilesIntensity
  {
    intensityProfilesTable: Table
  }

type Protocol
  {
    name: String
    description: String
    version: String!
    authors: [Experimenter]
    url: String!
  }

type PSFBeads
  {
    name: String
    description: String
    preparationProtocol: Protocol!
    manufacturer: String
    beadDiameterMicron: Float!
  }

type PSFBeadsDataset
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    microscope: Microscope!
    experimenter: Experimenter
    acquisitionDatetime: Datetime
    acquisitionProtocol: Protocol
    processed: Boolean!
    inputData: PSFBeadsInputData
    inputParameters: PSFBeadsInputParameters
    output: PSFBeadsOutput
    sample: PSFBeads
  }

type PSFBeadsInputData
  {
    psfBeadsImages: [Image]!
  }

type PSFBeadsInputParameters
  {
    bitDepth: Integer
    saturationThreshold: Float
    minLateralDistanceFactor: Float!
    sigmaZ: Float!
    sigmaY: Float!
    sigmaX: Float!
    snrThreshold: Float!
    fittingR2Threshold: Float!
    intensityRobustZScoreThreshold: Float!
  }

type PSFBeadsKeyMeasurements
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    tableData: MetaObject
    channelName: [String]
    channelNr: [Integer]
    totalBeadCount: [Integer]
    consideredValidCount: [Integer]
    consideredSelfProximityCount: [Integer]
    consideredLateralEdgeCount: [Integer]
    consideredAxialEdgeCount: [Integer]
    consideredIntensityOutlierCount: [Integer]
    consideredBadFitZCount: [Integer]
    consideredBadFitYCount: [Integer]
    consideredBadFitXCount: [Integer]
    intensityIntegratedMean: [Float]
    intensityIntegratedMedian: [Float]
    intensityIntegratedStd: [Float]
    intensityMaxMean: [Float]
    intensityMaxMedian: [Float]
    intensityMaxStd: [Float]
    intensityMinMean: [Float]
    intensityMinMedian: [Float]
    intensityMinStd: [Float]
    intensityStdMean: [Float]
    intensityStdMedian: [Float]
    intensityStdStd: [Float]
    fitR2ZMean: [Float]
    fitR2ZMedian: [Float]
    fitR2ZStd: [Float]
    fitR2YMean: [Float]
    fitR2YMedian: [Float]
    fitR2YStd: [Float]
    fitR2XMean: [Float]
    fitR2XMedian: [Float]
    fitR2XStd: [Float]
    fwhmPixelZMean: [Float]
    fwhmPixelZMedian: [Float]
    fwhmPixelZStd: [Float]
    fwhmPixelYMean: [Float]
    fwhmPixelYMedian: [Float]
    fwhmPixelYStd: [Float]
    fwhmPixelXMean: [Float]
    fwhmPixelXMedian: [Float]
    fwhmPixelXStd: [Float]
    fwhmMicronZMean: [Float]
    fwhmMicronZMedian: [Float]
    fwhmMicronZStd: [Float]
    fwhmMicronYMean: [Float]
    fwhmMicronYMedian: [Float]
    fwhmMicronYStd: [Float]
    fwhmMicronXMean: [Float]
    fwhmMicronXMedian: [Float]
    fwhmMicronXStd: [Float]
    fwhmLateralAsymmetryRatioMean: [Float]
    fwhmLateralAsymmetryRatioMedian: [Float]
    fwhmLateralAsymmetryRatioStd: [Float]
    averageBeadFitR2Z: [Float]
    averageBeadFitR2Y: [Float]
    averageBeadFitR2X: [Float]
    averageBeadFwhmPixelZ: [Float]
    averageBeadFwhmPixelY: [Float]
    averageBeadFwhmPixelX: [Float]
    averageBeadFwhmMicronZ: [Float]
    averageBeadFwhmMicronY: [Float]
    averageBeadFwhmMicronX: [Float]
    averageBeadFwhmLateralAsymmetryRatio: [Float]
    averageBeadIntensityIntegrated: [Float]
    averageBeadIntensityMax: [Float]
    averageBeadIntensityMin: [Float]
    averageBeadIntensityStd: [Float]
  }

type PSFBeadsOutput
  {
    processingApplication: [String]!
    processingVersion: [String]!
    processingEntity: [String]
    processingDatetime: Datetime!
    processingLog: String
    warnings: [String]
    errors: [String]
    validated: Boolean!
    validationDatetime: Datetime
    comment: Comment
    analyzedBeadCenters: [Roi]
    consideredBeadCentersLateralEdge: [Roi]
    consideredBeadCentersSelfProximity: [Roi]
    consideredBeadCentersAxialEdge: [Roi]
    consideredBeadCentersIntensityOutlier: [Roi]
    consideredBeadCentersZFitQuality: [Roi]
    consideredBeadCentersYFitQuality: [Roi]
    consideredBeadCentersXFitQuality: [Roi]
    keyMeasurements: PSFBeadsKeyMeasurements
    beadProperties: Table
    beadProfilesZ: Table
    beadProfilesY: Table
    beadProfilesX: Table
    averageBead: Image
  }

type Rectangle
  {
    name: String
    description: String
    z: Float
    c: Integer
    t: Integer
    fillColor: Color
    strokeColor: Color
    strokeWidth: Integer
    x: Float!
    y: Float!
    w: Float!
    h: Float!
  }

type Roi
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    points: [Point]
    lines: [Line]
    rectangles: [Rectangle]
    ellipses: [Ellipse]
    polygons: [Polygon]
    masks: [Mask]
  }

interface RoiMeasurements
  {
    measurementsTable: Table
  }

interface Sample
  {
    name: String
    description: String
    preparationProtocol: Protocol!
    manufacturer: String
  }

interface Shape
  {
    name: String
    description: String
    z: Float
    c: Integer
    t: Integer
    fillColor: Color
    strokeColor: Color
    strokeWidth: Integer
  }

interface Table
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    tableData: MetaObject
    columns: [Column]!
  }

type TimeSeries
  {
    timePointsSec: [Float]!
  }

type UserExperiment
  {
    name: String
    description: String
    preparationProtocol: Protocol!
    manufacturer: String
  }

type UserExperimentDataset
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    microscope: Microscope!
    experimenter: Experimenter
    acquisitionDatetime: Datetime
    acquisitionProtocol: Protocol
    processed: Boolean!
    inputData: UserExperimentInputData
    inputParameters: UserExperimentInputParameters
    output: UserExperimentOutput
    sample: UserExperiment
  }

type UserExperimentInputData
  {
    userExperimentImages: [Image]!
    orthogonalRois: [Roi]
    profileRois: [Roi]
  }

type UserExperimentInputParameters
  {
    bitDepth: Integer
    saturationThreshold: Float
  }

type UserExperimentKeyMeasurements
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    tableData: MetaObject
    channelName: [String]
    channelNr: [Integer]
    variationCoefficient: [Float]
    saturatedChannels: [Integer]
  }

type UserExperimentOutput
  {
    processingApplication: [String]!
    processingVersion: [String]!
    processingEntity: [String]
    processingDatetime: Datetime!
    processingLog: String
    warnings: [String]
    errors: [String]
    validated: Boolean!
    validationDatetime: Datetime
    comment: Comment
    intensityProfiles: [Table]
    orthogonalImages: [OrthogonalImage]
    fftImages: [Image]
    keyMeasurements: UserExperimentKeyMeasurements
  }

type Vertex
  {
    x: Float!
    y: Float!
  }

