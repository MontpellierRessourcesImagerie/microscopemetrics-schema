type ArgolightBCentersOfMass implements CentersOfMass
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    points: [Point]
    lines: [Line]
    rectangles: [Rectangle]
    ellipses: [Ellipse]
    polygons: [Polygon]
    masks: [Mask]
  }

type ArgolightBDataset
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    microscope: Microscope!
    sample: Sample
    experimenter: Experimenter
    acquisitionDatetime: Datetime
    processed: Boolean!
    input: ArgolightBInput
    output: ArgolightBOutput
  }

type ArgolightBDistanceKeyValues
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    channelA: [Integer]
    channelB: [Integer]
    mean3dDist: [Float]
    median3dDist: [Float]
    std3dDist: [Float]
    mad3dDist: [Float]
    meanZDist: [Float]
    medianZDist: [Float]
    stdZDist: [Float]
    madZDist: [Float]
  }

type ArgolightBInput
  {
    argolightBImage: Image!
    bitDepth: Integer
    saturationThreshold: Float!
    spotsDistance: Float!
    sigmaZ: Float!
    sigmaY: Float!
    sigmaX: Float!
    lowerThresholdCorrectionFactors: [Float]
    upperThresholdCorrectionFactors: [Float]
    removeCenterCross: Boolean
  }

type ArgolightBIntensityKeyValues
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    channelNr: [Integer]
    nrOfSpots: [Integer]
    intensityMaxSpot: [Float]
    intensityMaxSpotRoi: [Integer]
    intensityMinSpot: [Float]
    intensityMinSpotRoi: [Integer]
    meanIntensity: [Float]
    medianIntensity: [Float]
    stdMeanIntensity: [Float]
    madMeanIntensity: [Float]
    minMaxIntensityRatio: [Float]
  }

type ArgolightBOutput
  {
    processingApplication: [String]!
    processingVersion: [String]!
    processingEntity: [String]
    processingDatetime: Datetime!
    processingLog: String
    warnings: [String]
    errors: [String]
    comment: Comment
    spotsLabelsImage: ImageMask
    spotsCentersOfMass: [ArgolightBCentersOfMass]
    intensityKeyValues: ArgolightBIntensityKeyValues
    distanceKeyValues: ArgolightBDistanceKeyValues
    spotsProperties: Table
    spotsDistances: Table
  }

type ArgolightEDataset
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    microscope: Microscope!
    sample: Sample
    experimenter: Experimenter
    acquisitionDatetime: Datetime
    processed: Boolean!
    input: ArgolightEInput
    output: ArgolightEOutput
  }

type ArgolightEInput
  {
    argolightEImage: Image!
    bitDepth: Integer
    saturationThreshold: Float!
    orientationAxis: Integer!
    measuredBand: Float!
    prominenceThreshold: Float!
  }

type ArgolightEKeyValues
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    channelNr: [Integer]
    focusSlice: [Integer]
    rayleighResolutionPixels: [Float]
    rayleighResolutionMicrons: [Float]
    peakPositionA: [Float]
    peakPositionB: [Float]
    peakHeightA: [Float]
    peakHeightB: [Float]
    peakProminenceA: [Float]
    peakProminenceB: [Float]
  }

type ArgolightEOutput
  {
    processingApplication: [String]!
    processingVersion: [String]!
    processingEntity: [String]
    processingDatetime: Datetime!
    processingLog: String
    warnings: [String]
    errors: [String]
    comment: Comment
    peaksRois: [Roi]
    keyMeasurements: ArgolightEKeyValues
    intensityProfiles: Table
  }

interface CentersFitted
  {
  }

interface CentersGeometric
  {
  }

interface CentersMaxIntensity
  {
  }

interface CentersOfMass
  {
  }

type Channel
  {
    name: String
    description: String
    excitationWavelengthNm: Float
    emissionWavelengthNm: Float
  }

type ChannelSeries
  {
    channels: [Channel]!
  }

type Color
  {
    r: Integer!
    g: Integer!
    b: Integer!
    alpha: Integer
  }

type Column
  {
    name: String
    description: String
    sourceReference: DataReference
  }

type ColumnSeries
  {
    columns: [Column]!
  }

type Comment
  {
    datetime: Datetime!
    author: Experimenter
    commentType: CommentTypesEnum!
    text: String!
  }

type DataReference
  {
    dataUri: String
    omeroHost: String
    omeroPort: Integer
    omeroObjectType: OMEROObjectTypeEnum
    omeroObjectId: Integer
  }

type Ellipse
  {
    name: String
    description: String
    z: Float
    c: Integer
    t: Integer
    fillColor: Color
    strokeColor: Color
    strokeWidth: Integer
    x: Float!
    y: Float!
    xRad: Float!
    yRad: Float!
  }

type Experimenter
  {
    name: String!
    orcid: String!
  }

type FieldIlluminationDataset
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    microscope: Microscope!
    sample: Sample
    experimenter: Experimenter
    acquisitionDatetime: Datetime
    processed: Boolean!
    input: FieldIlluminationInput
    output: FieldIlluminationOutput
  }

type FieldIlluminationInput
  {
    fieldIlluminationImage: [Image]!
    bitDepth: Integer
    saturationThreshold: Float!
    cornerFraction: Float!
    sigma: Float!
  }

type FieldIlluminationKeyValues
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    channelName: [String]
    centerRegionIntensityFraction: [Float]
    centerRegionAreaFraction: [Float]
    centerOfMassY: [Float]
    centerOfMassYRelative: [Float]
    centerOfMassX: [Float]
    centerOfMassXRelative: [Float]
    centerOfMassDistanceRelative: [Float]
    centerGeometricY: [Float]
    centerGeometricYRelative: [Float]
    centerGeometricX: [Float]
    centerGeometricXRelative: [Float]
    centerGeometricDistanceRelative: [Float]
    centerFittedY: [Float]
    centerFittedYRelative: [Float]
    centerFittedX: [Float]
    centerFittedXRelative: [Float]
    centerFittedDistanceRelative: [Float]
    maxIntensity: [Float]
    maxIntensityPosY: [Float]
    maxIntensityPosYRelative: [Float]
    maxIntensityPosX: [Float]
    maxIntensityPosXRelative: [Float]
    maxIntensityDistanceRelative: [Float]
    topLeftIntensityMean: [Float]
    topLeftIntensityRatio: [Float]
    topCenterIntensityMean: [Float]
    topCenterIntensityRatio: [Float]
    topRightIntensityMean: [Float]
    topRightIntensityRatio: [Float]
    middleLeftIntensityMean: [Float]
    middleLeftIntensityRatio: [Float]
    middleCenterIntensityMean: [Float]
    middleCenterIntensityRatio: [Float]
    middleRightIntensityMean: [Float]
    middleRightIntensityRatio: [Float]
    bottomLeftIntensityMean: [Float]
    bottomLeftIntensityRatio: [Float]
    bottomCenterIntensityMean: [Float]
    bottomCenterIntensityRatio: [Float]
    bottomRightIntensityMean: [Float]
    bottomRightIntensityRatio: [Float]
  }

type FieldIlluminationOutput
  {
    processingApplication: [String]!
    processingVersion: [String]!
    processingEntity: [String]
    processingDatetime: Datetime!
    processingLog: String
    warnings: [String]
    errors: [String]
    comment: Comment
    keyValues: FieldIlluminationKeyValues
    intensityProfiles: [Table]
    roiProfiles: [Roi]
    roiCorners: Roi
    roiCentersOfMass: [Roi]
    roiCentersGeometric: [Roi]
    roiCentersFitted: [Roi]
    roiCentersMaxIntensity: [Roi]
    roiCenterRegion: [Roi]
  }

type HarmonizedMetricsDatasetCollection
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    datasets: [MetricsDataset]!
    datasetClass: String!
  }

type Image
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    voxelSizeXMicron: Float
    voxelSizeYMicron: Float
    voxelSizeZMicron: Float
    shapeX: Integer!
    shapeY: Integer!
    shapeZ: Integer!
    shapeC: Integer!
    shapeT: Integer!
    timeSeries: TimeSeries
    channelSeries: ChannelSeries
    acquisitionDatetime: Datetime!
    sourceImages: [DataReference]
    arrayData: MetaObject
  }

type ImageMask
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    voxelSizeXMicron: Float
    voxelSizeYMicron: Float
    voxelSizeZMicron: Float
    shapeX: Integer!
    shapeY: Integer!
    shapeZ: Integer!
    shapeC: Integer!
    shapeT: Integer!
    timeSeries: TimeSeries
    channelSeries: ChannelSeries
    acquisitionDatetime: Datetime!
    sourceImages: [DataReference]
    arrayData: MetaObject
  }

interface KeyValues
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
  }

type Line
  {
    name: String
    description: String
    z: Float
    c: Integer
    t: Integer
    fillColor: Color
    strokeColor: Color
    strokeWidth: Integer
    x1: Float!
    y1: Float!
    x2: Float!
    y2: Float!
  }

type Mask
  {
    name: String
    description: String
    z: Float
    c: Integer
    t: Integer
    fillColor: Color
    strokeColor: Color
    strokeWidth: Integer
    y: Integer!
    x: Integer!
    mask: ImageMask
  }

type MetaObject
  {
  }

type MetricsDataset
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    microscope: Microscope!
    sample: Sample
    experimenter: Experimenter
    acquisitionDatetime: Datetime
    processed: Boolean!
    input: MetricsInput!
    output: MetricsOutput
  }

type MetricsDatasetCollection
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    datasets: [MetricsDataset]!
  }

interface MetricsInput
  {
  }

interface MetricsObject
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
  }

interface MetricsOutput
  {
    processingApplication: [String]!
    processingVersion: [String]!
    processingEntity: [String]
    processingDatetime: Datetime!
    processingLog: String
    warnings: [String]
    errors: [String]
    comment: Comment
  }

type Microscope
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    type: MicroscopeTypeEnum
    manufacturer: String
    model: String
    serialNumber: String
    comments: [Comment]
  }

type MicroscopeCollection
  {
    microscopes: [Microscope]!
  }

interface NamedObject
  {
    name: String
    description: String
  }

type Point
  {
    name: String
    description: String
    z: Float
    c: Integer
    t: Integer
    fillColor: Color
    strokeColor: Color
    strokeWidth: Integer
    y: Float!
    x: Float!
  }

type Polygon
  {
    name: String
    description: String
    z: Float
    c: Integer
    t: Integer
    fillColor: Color
    strokeColor: Color
    strokeWidth: Integer
    vertexes: [Vertex]!
    isOpen: Boolean!
  }

interface ProfilesIntensity
  {
    intensityProfilesTable: Table
  }

type Protocol
  {
    name: String
    description: String
    version: String!
    authors: [Experimenter]
    url: String!
  }

type PSFBeadsDataset
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    microscope: Microscope!
    sample: Sample
    experimenter: Experimenter
    acquisitionDatetime: Datetime
    processed: Boolean!
    input: PSFBeadsInput
    output: PSFBeadsOutput
  }

type PSFBeadsInput
  {
    psfBeadsImages: [Image]!
    bitDepth: Integer
    saturationThreshold: Float
    minLateralDistanceFactor: Float!
    sigmaZ: Float!
    sigmaY: Float!
    sigmaX: Float!
    snrThreshold: Float!
    fittingR2Threshold: Float!
    intensityRobustZScoreThreshold: Float!
  }

type PSFBeadsKeyValues
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    channelNr: [Integer]
    nrOfBeadsAnalyzed: [Integer]
    nrOfBeadsDiscardedLateralEdge: [Integer]
    nrOfBeadsDiscardedSelfProximity: [Integer]
    nrOfBeadsConsideredAxialEdge: [Integer]
    nrOfBeadsConsideredIntensityOutlier: [Integer]
    nrOfBeadsConsideredBadZFit: [Integer]
    nrOfBeadsConsideredBadYFit: [Integer]
    nrOfBeadsConsideredBadXFit: [Integer]
    fitR2ZMean: [Float]
    fitR2ZMedian: [Float]
    fitR2ZStd: [Float]
    fitR2YMean: [Float]
    fitR2YMedian: [Float]
    fitR2YStd: [Float]
    fitR2XMean: [Float]
    fitR2XMedian: [Float]
    fitR2XStd: [Float]
    resolutionMeanFwhmZPixels: [Float]
    resolutionMedianFwhmZPixels: [Float]
    resolutionStdFwhmZPixels: [Float]
    resolutionMeanFwhmYPixels: [Float]
    resolutionMedianFwhmYPixels: [Float]
    resolutionStdFwhmYPixels: [Float]
    resolutionMeanFwhmXPixels: [Float]
    resolutionMedianFwhmXPixels: [Float]
    resolutionStdFwhmXPixels: [Float]
    resolutionMeanFwhmZMicrons: [Float]
    resolutionMedianFwhmZMicrons: [Float]
    resolutionStdFwhmZMicrons: [Float]
    resolutionMeanFwhmYMicrons: [Float]
    resolutionMedianFwhmYMicrons: [Float]
    resolutionStdFwhmYMicrons: [Float]
    resolutionMeanFwhmXMicrons: [Float]
    resolutionMedianFwhmXMicrons: [Float]
    resolutionStdFwhmXMicrons: [Float]
    resolutionMeanFwhmLateralAsymmetryRatio: [Float]
    resolutionMedianFwhmLateralAsymmetryRatio: [Float]
    resolutionStdFwhmLateralAsymmetryRatio: [Float]
  }

type PSFBeadsOutput
  {
    processingApplication: [String]!
    processingVersion: [String]!
    processingEntity: [String]
    processingDatetime: Datetime!
    processingLog: String
    warnings: [String]
    errors: [String]
    comment: Comment
    analyzedBeadCenters: [Roi]
    discardedBeadCentersLateralEdge: [Roi]
    discardedBeadCentersSelfProximity: [Roi]
    consideredBeadCentersAxialEdge: [Roi]
    consideredBeadCentersIntensityOutlier: [Roi]
    consideredBeadCentersZFitQuality: [Roi]
    consideredBeadCentersYFitQuality: [Roi]
    consideredBeadCentersXFitQuality: [Roi]
    keyValues: PSFBeadsKeyValues
    beadProperties: Table
    beadZProfiles: Table
    beadYProfiles: Table
    beadXProfiles: Table
  }

type Rectangle
  {
    name: String
    description: String
    z: Float
    c: Integer
    t: Integer
    fillColor: Color
    strokeColor: Color
    strokeWidth: Integer
    x: Float!
    y: Float!
    w: Float!
    h: Float!
  }

type Roi
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    points: [Point]
    lines: [Line]
    rectangles: [Rectangle]
    ellipses: [Ellipse]
    polygons: [Polygon]
    masks: [Mask]
  }

interface RoiMeasurements
  {
    measurementsTable: Table
  }

type Sample
  {
    name: String
    description: String
    type: String!
    protocol: Protocol!
  }

interface Shape
  {
    name: String
    description: String
    z: Float
    c: Integer
    t: Integer
    fillColor: Color
    strokeColor: Color
    strokeWidth: Integer
  }

type Table
  {
    name: String
    description: String
    dataReference: DataReference
    linkedReferences: [DataReference]
    columnSeries: ColumnSeries!
    tableData: MetaObject
  }

interface Tag
  {
    dataReference: DataReference
    linkedReferences: [DataReference]
    description: String
    name: String!
  }

type TimeSeries
  {
    values: [Float]!
  }

type Vertex
  {
    x: Float!
    y: Float!
  }

